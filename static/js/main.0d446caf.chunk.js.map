{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","rating","title","genres","summary","poster","trailer","runtime","url","youtube","className","src","alt","target","href","rel","aria-hidden","map","genre","index","key","slice","class","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","yt_trailer_code","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kUA+DeA,MA3Df,YAUI,IATFC,EASC,EATDA,KACAC,EAQC,EARDA,OACAC,EAOC,EAPDA,MACAC,EAMC,EANDA,OACAC,EAKC,EALDA,QACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,QACAC,EAEC,EAFDA,QACAC,EACC,EADDA,IAEIC,EAAO,wCAAoCH,EAApC,eACX,OACE,yBAAKI,UAAU,SACb,yBAAKC,IAAKN,EAAQO,IAAKV,EAAOA,MAAOA,IACrC,yBAAKQ,UAAU,eACb,wBAAIA,UAAU,gBAAgBR,GAC9B,uBAAGW,OAAO,SAASC,KAAML,EAASM,IAAI,uBACpC,uBAAGL,UAAU,qBAAqBM,cAAY,UAEtD,wBAAIN,UAAU,eAAeV,EAA7B,MAAsCO,EAAtC,OAEM,wBAAIG,UAAU,iBACXP,EAAOc,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOT,UAAU,iBACvBQ,OAIP,wBAAIR,UAAU,iBAAd,WAAuCT,EAAvC,OACA,uBACEY,OAAO,SACPH,UAAU,cACVI,KAAMN,EACNO,IAAI,uBAEJ,uBAAGL,UAAU,kBACVN,EAAQiB,MAAM,EAAG,KADpB,IAC0B,uBAAGC,MAAM,0BC8B9BC,G,iNAjEbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAQVC,U,sBAAY,8BAAAC,EAAA,sEAOAC,IAAMC,IACd,4DARQ,gBAKEJ,EALF,EAIRK,KACEA,KAAQL,OAQZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IAbzB,2C,mFAkBVQ,KAAKN,c,+BAGE,MAEuBM,KAAKT,MAA3BC,EAFD,EAECA,UAAWC,EAFZ,EAEYA,OACnB,OACE,6BAAShB,UAAU,aAChBe,EACC,yBAAKf,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZgB,EAAOT,KAAI,SAAAiB,GAAK,OACf,kBAAC,EAAD,CACEd,IAAKc,EAAMC,GACXA,GAAID,EAAMC,GACVnC,KAAMkC,EAAMlC,KACZC,OAAQiC,EAAMjC,OACdC,MAAOgC,EAAMhC,MACbC,OAAQ+B,EAAM/B,OAEdC,QAAS8B,EAAM9B,QACfC,OAAQ6B,EAAME,mBACd9B,QAAS4B,EAAMG,gBACf9B,QAAS2B,EAAM3B,QACfC,IAAK0B,EAAM1B,e,GAxDT8B,IAAMC,YCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0d446caf.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({\n  year,\n  rating,\n  title,\n  genres,\n  summary,\n  poster,\n  trailer,\n  runtime,\n  url\n}) {\n  let youtube = `https://www.youtube.com/embed/${trailer}?autoplay=1`;\n  return (\n    <div className=\"movie\">\n      <img src={poster} alt={title} title={title} />\n      <div className=\"movie__data\">\n        <h3 className=\"movie__title\">{title}</h3>\n        <a target=\"_blank\" href={youtube} rel=\"noopener noreferrer\">\n          <i className=\"fa fa-youtube-play\" aria-hidden=\"true\"></i>\n        </a>\n  <h5 className=\"movie__year\">{year} | {runtime}min</h5>\n        {/* <h5 className=\"movie__genres\">{genres}</h5> */}\n        <ul className=\"movie__genres\">\n          {genres.map((genre, index) => (\n            <li key={index} className=\"genres__genre\">\n              {genre}\n            </li>\n          ))}\n        </ul>\n        <h5 className=\"movie__rating\">Rating: {rating}/10</h5>\n        <a\n          target=\"_blank\"\n          className=\"movie__more\"\n          href={url}\n          rel=\"noopener noreferrer\"\n        >\n          <p className=\"movie__summary\">\n            {summary.slice(0, 180)} <i class=\"fa fa-ellipsis-h\"></i>\n          </p>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n  // genres: PropTypes.string.isRequired, // added\n  rating: PropTypes.number.isRequired, // added\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  trailer: PropTypes.string, // added\n  runtime: PropTypes.number.isRequired, // added\n  url: PropTypes.string.isRequired // added\n};\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n  // We need to tell JS that componentDidMount might take a bit to finish, so we want to wait for it.\n  // To wait for it in JS, we need to add \"async() ~ await\"\n  // The function is asynchronous (비동기) which means you have to wait for it.\n  // Inside of the function, \"what do you want me to wait for? axios\". So, wait for axios to finish. (await axios.get(\"https://~~\"\"))\n\n  getMovies = async () => {\n    // AS IS: const movies =\n    // To get \"movies.data.data.movies, change it to the below:\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    // Update movies in state\n    // setState({stateMovies: axiosMovies})\n    // setState({movies: movies})\n    this.setState({ movies, isLoading: false });\n  };\n\n  // When component did mount, we are going to get movies\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render() {\n    // Not to use \"this.state.isLoading\", we can use this below instead\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : ( \n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                rating={movie.rating}\n                title={movie.title}\n                genres={movie.genres}\n                // genres={movie.genres.join(\"/\")}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                trailer={movie.yt_trailer_code}\n                runtime={movie.runtime}\n                url={movie.url}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}